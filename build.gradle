buildscript {
	repositories {
		mavenCentral()
        maven {
            name = "github"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:[1.2-1.4.6-SNAPSHOT,)'
		classpath 'tech.justagod:cutter:2.1.0-SNAPSHOT'
	}
}

repositories {
	flatDir {
		dirs 'deps'
	}
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'cutter'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

version = mod_version
group = mod_group
archivesBaseName = mod_archives_name

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "eclipse"
	replace "@VERSION@", project.version
}
cutter.initializeDefault(true, false)

dependencies {
	compileOnly name: 'PermissionsEx1-7-10'
	compileOnly name: 'bukkit-1.13.1-R0.1-SNAPSHOT'
	compileOnly 'me.lucko:spark-api:0.1-SNAPSHOT'
	compileOnly 'net.luckperms:api:5.4'
	implementation "io.gitlab.hohserg.elegant.networking:elegant-networking-1.7.10:3.14"
	compileOnly "io.gitlab.hohserg.elegant.networking:annotation-processor:3.14"
	annotationProcessor "io.gitlab.hohserg.elegant.networking:annotation-processor:3.14"
}
idea.module.inheritOutputDirs = true
processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task devJar(type: Jar) {
	classifier = 'dev'
	from sourceSets.main.output
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives devJar
	archives sourcesJar
}
